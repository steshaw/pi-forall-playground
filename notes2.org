* Putting it all together in a Haskell implementation

Last time, we defined a bidirectional type system for a small core
language. Today we'll start talking about what the implementation of this
language might look like in Haskell.

First, an overview of the main files of the implementation.

:      Syntax.hs      - specification of the abstract syntax of the language
:      Parser.hs      - turn strings into AST
:      PrettyPrint.hs - displays AST in a (somewhat) readable form
:      Main.hs        - top-level routines (repl)
: 
:      Environment.hs - defines the type checking monad
:      TypeCheck.hs   - implementation of the bidirectional type checker

** Variable binding using the unbound library [Syntax.hs]

One difficulty with implementing the lambda calculus is the treatment of
variable binding. Lambdas and Pis /bind/ variables in the body. In the
implementation of our type checker, we'll need to be able to determine whether
two terms are /alpha-equivalent/, calculate the /free variables/ of a term, and
perform /capture-avoiding substitution./ When we work with a lambda expression,
we will want to be sure that the binding variable is /fresh/, that is, distinct
from all other variables in the program.

In today's code, we'll use the =unbound= library to get all of these operations
for free. This library defines a type for variable names, called =Name=.

#+begin_src haskell
    -- | term variable names, use unbound library to
    -- automatically generate fv, subst, alpha-eq
    type TName = Name Term
#+end_src

This type is indexed by the type of AST that this is a name for. That way
unbound can make sure that substitutions make sense.

#+begin_src haskell
     class Subst b a where
        subst  :: Name b -> b -> a -> a
#+end_src

The =subst= function in this class ensures that when we see =subst x a b=, which
means "substitute a for x in b" (also written b{a/x} above) that =a= is the
right sort of thing to stick in for =x=. The Unbound library can automatically
generate instances of the =Subst= class. Furthermore, although it seems like we
only need to substitute within terms, we'll actually need to have substitution
available at many types.

With names, we can define the syntax that corresponds to our language above,
using the following datatype.

#+begin_src haskell
    data Term =
         Type                                -- ^ universe
       | Var TName                           -- ^ variables
       | Lam (Bind TName, Embed Annot) Term) -- ^ abstraction
       | App Term Term                       -- ^ application
       | Pi (Bind (TName, Embed Term) Term)  -- ^ function type
#+end_src

As you can see, variables are represented by names. The =Bind= type constructor
declares the scope of the bound variables. Both =Lam= and =Pi= bind a single
variable in a =Term=. The =Annot= type is an optional type annotation:

#+begin_src haskell
    newtype Annot = Annot (Maybe Type) deriving Show
#+end_src

and, because the syntax is all shared, a =Type= is just another name for a
=Term=. We'll use this name just for documentation.

#+begin_src haskell
    type Type = Term
#+end_src

The fact that this annotation is optional means that we'll be able to use a
single datatype for both the versions of the language (the one where lambdas are
annotated and the one where they aren't). We'll start with an expression that
has no annotations on lambdas, and elaborate it to one that does.

The bottom of the Syntax file contains instructions for unbound. The line

#+begin_src haskell
    derive [''Term] -- TODO: Seems that this is no longer necessary with
                    --       unbound-generics.
#+end_src

instructs unbound to derive a representation of the structure of the =Term=
AST. This is all that is necessary to create an instance of the =Alpha= type
class for this type.

#+begin_src haskell
    instance Alpha Term
#+end_src

Among other things, the Alpha class enables functions for alpha
equivalence and free variable calculation. Because unbound creates these
instances for us, we don't have to worry about defining them.

#+begin_src haskell
    aeq :: Alpha a => a -> a -> Bool
    fv  :: Alpha a => a -> [Name a]
#+end_src

Creating an instance of the =Subst= type class requires telling unbound where
the variables are (and no more):

#+begin_src haskell
    instance Subst Term Term where
      isvar (Var x) = Just (SubstName x)
      isvar _ = Nothing
#+end_src

We also need to be able to substitute terms through annotations, but annotations
don't contain free variables directly, they only have them within the terms
inside them.

#+begin_src haskell
    instance Subst Term Annot
#+end_src

For more information about unbound, see [[https://code.google.com/p/replib/source/browse/trunk/Unbound/tutorial/Tutorial.lhs][The Unbound Tutorial]] and the [[http://hackage.haskell.org/package/unbound-0.4.3.1][unbound
hackage page]].

** A TypeChecking monad [Environment.hs]

Recall that our plan is to write two mutually recursive functions for type
checking of the following types:

#+begin_src haskell
    inferType :: Term -> Ctx -> Maybe (Term,Type)

    checkType :: Term -> Type -> Ctx -> Maybe Term
#+end_src

The inference function should take a term and a context and if it type checks,
produce its type and its elaboration (where all annotations have been filled
in). The checking function should take a term and a context and a type, and if
that term has that type produce an elaborated version (where all of the
annotations have been filled in).

Well actually, we'll do something a bit different. We'll define a /type checking
monad/, called =TcMonad= that will handle the plumbing for the typing context,
and allow us to return more information than =Nothing= when a program doesn't
type check.

#+begin_src haskell
    inferType :: Term -> TcMonad (Term,Type)

    checkType :: Term -> Type -> TcMonad Term
#+end_src

Those of you who have worked with Haskell before may be familiar with the
[[https://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Reader.html][MonadReader]], and the [[https://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Error.html][MonadError]], which our type checking monad will be instances
of.

#+begin_src haskell
    lookupTy :: TName -> TcMonad Term
    extendCtx :: Decl -> TcMonad Term -> TcMonad Term

    err  :: (Disp a) => a -> TcMonad b
    warn :: (Disp a) => a -> TcMonad b
#+end_src

We'll also need this monad to be a freshness monad, to support working with
binding structure, and throw in MonadIO for good measure.

** Implementing the TypeChecking Algorithm [Typecheck.hs]

Now that we have the type checking monad available, we can start our
implementation. For flexibility =inferType= and =checkType= will /both/ be
implemented by the same function:

#+begin_src haskell
    inferType :: Term -> TcMonad (Term, Type)
    inferType t = tcTerm t Nothing

    checkType :: Term -> Type -> TcMonad (Term, Type)
    checkType tm ty = tcTerm tm (Just ty)
#+end_src

The =tcTerm= function checks a term, producing an elaborated term where all of
the type annotations have been filled in, and its type. The second argument is
=Nothing= in inference mode and an expected type in checking mode.

#+begin_src haskell
    tcTerm :: Term -> Maybe Type -> TcMonad (Term, Type)
#+end_src

The general structure of this function starts with a pattern match for
the various syntactic forms in inference mode:

#+begin_src haskell
    tcTerm (Var x) Nothing = ...
 
    tcTerm Type Nothing = ...

    tcTerm (Pi bnd) Nothing = ...

    tcTerm (Lam bnd) Nothing = ... -- must have annotation

    tcTerm (App t1 t2) Nothing = ...
#+end_src

Mixed in here, we also have a pattern for lambda expressions in checking mode:

#+begin_src haskell
    tcTerm (Lam bnd) (Just (Pi bnd2)) = ...
     
    tcTerm (Lam _) (Just nf) =  -- checking mode wrong type
       err [DS "Lambda expression has a function type, not", DD nf]
#+end_src

There are also several cases for practical reasons (annotations, source code
positions, parentheses, TRUSTME) and a few cases for homework.

Finally, the last case covers all other forms of checking mode, by calling
inference mode and making sure that the inferred type is equal to the checked
type.

#+begin_src haskell
    tcTerm tm (Just ty) = do
      (atm, ty') <- inferType tm
      unless (aeq ty' ty) $ err [DS "Types don't match", DD ty, DS "and", DD ty']
      return (atm, ty)
#+end_src

The function =aeq= merely ensures that the two types are alpha-equivalent. If
they are, then it returns =()= to the monad, otherwise it throws an error.

*** Example

The file [[version1/test/Lec1.pi][Lec1.pi]] contains the examples that we worked out in lecture last
time. Let's try to type check it, after filling in the missing code in
=TypeCheck.hs=.

*** Exercise (Type Theory & Haskell) - Add Booleans and Sigma types

Some fairly standard typing rules for booleans assert that Bool is a valid type:

:     ───────────────── Bool
:      Γ ⊢ Bool : Type
: 
:     ───────────────── true
:      Γ ⊢ true : Bool
: 
:     ────────────────── false
:      Γ ⊢ false : Bool
: 
:      Γ ⊢ a : Bool
:      Γ ⊢ b : A
:      Γ ⊢ c : A
:     ───────────────────────────── if
:      Γ ⊢ if a then b else c : A

Likewise, we can also extend the language with Sigma types.

:      Γ ⊢ A : Type    Γ, x : A ⊢ B : Type
:     ───────────────────────────────────── sigma
:            Γ ⊢ { x : A | B } : Type

A sigma type is a product where the type of the second component of the product
can depend on the first component.

:      Γ ⊢ a : A    Γ ⊢ b : B { a / x }
:     ────────────────────────────────── pair
:         Γ ⊢ (a, b) : { x : A | B }

We destruct sigmas using pattern matching. A simple rule for pattern matching
introduces variables into the context when pattern matching the sigma
type. These variables are not allowed to appear free in the result type of the
pattern match.

:           Γ ⊢ a : { x : A | B }
:          Γ, x : A, y : B ⊢ b : C
:             Γ ⊢ C : Type
:     ──────────────────────────────── weak-pcase
:      Γ ⊢ pcase a of (x, y) -> b : C

This part of the homework has two parts:

1. First: rewrite the rules above in bidirectional style. Which rules should be
   inference rules? Which ones should be checking rules? If you are familiar
   with other systems, how do these rules compare?

2. In Haskell, later: The code in =version1/= includes abstract and concrete
   syntax for booleans and sigma types. The pi-forall file
   =version1/test/Hw1.pi= contains examples of using these new forms.  However,
   to get this file to compile, you'll need to fill in the missing cases in
   =version1/src/TypeCheck.hs=.
